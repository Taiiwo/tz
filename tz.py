def compress(data):
    # format data
    data = data.replace(" ", "")
    data = data.replace("\n", "")
    # find an unused pattern
    i = 0;
    while i < len(data):
        pattern = bin(i)[2:]
        if pattern not in data:
            break
        i += 1;
    # Now we have the shortest unused pattern, we need to search for substrings
    # that are longer than the pattern, that occur multiple times in the string
    highest = [False, False]
    _highest = highest
    b = 0
    a = len(pattern) + 1
    # this is the minimum size of the thing that we're looking for
    # q w e r t y u i o p a s d f g h j k l
    # ^                   ^
    # b [pattern  length] a
    # for increasing values of a
    while a < (len(data) / 4) + 1:
        oneMatched = False
        # moving b up the string
        for b in xrange(len(data) - a):
            # this is the echo we're trying
            echo = data[b:b+a]
            # how many times it appears in the data
            c = data.count(echo)
            # Now we need to work out if replacing the echo with the pattern
            # will save us space, or waste it.
            compressedData = data.replace(echo, pattern)
            compression = len(data) - len(pack(pattern, echo, compressedData))
            if c > 1:
                oneMatched = True
                # if this amount of saved space is higher than we've seen
                if not highest[1] or compression > highest[1]:
                    # Make sure that if we compress the data, it will
                    # decompress okay
                    if compressedData.replace(pattern, echo) == data:
                        # We found the best pattern:echo combo so far, so save
                        # it for later comparison
                        highest[0] = echo
                        highest[1] = compression
        # if we didn't get any matches for a search with this length, then we
        # won't find any longer matches.
        if not oneMatched:
            break
        a += 1
    # we now have our best possible pattern:echo combo.
    if highest[0]:
        print "replaced %s with %s %s times saving %s bytes" % \
            (highest[0], pattern, data.count(highest[0]), highest[1])
        data = data.replace(highest[0], pattern)
        # replace the echo with the pattern, and pack the data required to
        # decompress the data
        return pack(pattern, highest[0], data)
    else:
        # we didn't manage to compress anything, so just return the original
        return data

def decompress(data):
    pattern, echo, data = unpack(data)
    return data.replace(pattern, echo)

def pack(pattern, echo, data):
    patternBin = bin(len(pattern))[2:]
    echoBin = bin(len(echo))[2:]
    # pad with 0s and ignore the first 1
    data1 = ("0" * (8 - len(patternBin)) + patternBin)
    data2 = ("0" * (8 - len(echoBin)) + echoBin)
    #print "%s %s %s %s %s" % (data1, data2, pattern, echo, data)
    print data
    return data1 + data2 + pattern + echo + data

def unpack(data):
    def parse(data):
        for datum in data:
            data = data[1:]
            if datum == "1":
                break
        return data
    patternLen = int(data[0:8], 2)
    echoLen = int(data[8:16], 2)
    pattern = data[16:16 + patternLen]
    echo = data[16 + patternLen: 16 + patternLen + echoLen]
    data = data[16 + patternLen + echoLen:]
    print data
    return pattern, echo, data

if __name__ == "__main__":
    #data
    #data
    #data = "1" * 100
    data = "01001100 01101111 01110010 01100101 01101101 00100000 01101001"
    #data = "But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure"
    #data = ''.join(format(ord(x), 'b') for x in data)
    data = data.replace(" ", "")
    data = data.replace("\n", "")
    oData = data
    #data = compress(data)
    #print "Compressed %s bits into %s bits, saving %s at a ratio of %s" % \
    #    (len(oData), len(data), len(oData) - len(data), len(data) / float(len(oData)))
    #print "Compression Successful!"
    data1 = compress(data)
    data2 = decompress(data1)
    if data1 == data2:
        print "Compression Successful!"
    else:
        print "whoops"
